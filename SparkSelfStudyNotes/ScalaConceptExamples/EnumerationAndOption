
object MyClass {
    def main(args: Array[String]) {
      
        // Option
        println("Step 1: How to use Option and Some - a basic example")
        val glazedDonutTaste: Option[String] = Some("Very Tasty")
        println(s"Glazed Donut taste = ${glazedDonutTaste.get}")
     
        println("\nStep 2: How to use Option and None - a basic example")
        val glazedDonutName: Option[String] = None
        println(s"Glazed Donut name = ${glazedDonutName.getOrElse("Glazed Donut")}")
        
        val glazedDonutName1: Option[String] = Some("STRWBERRY DONUT")
        println(s"Glazed Donut name = ${glazedDonutName1.getOrElse("Glazed Donut")}")
              
        println("\nStep 3: How to use Pattern Matching with Option")
        glazedDonutName match {
            case Some(name) => println(s"Received donut name = $name")
            case None       => println(s"No donut name was found!")
        }
        
        // Enumeration 
        println("Step 1: How to create an Enumeration")
        object Donut extends Enumeration {
            type Donut = Value
        
            val Glazed      = Value("GLAZED")
            val Strawberry  = Value("STRAWBERRY")
            val Plain       = Value("PLAIN")
            val Vanilla     = Value("VANILLA")
        } //Donut Enumeration closed
        
        println("\nStep 2: How to print the String value of the enumeration")
        println(s"Vanilla Donut string value = ${Donut.Vanilla}")
        
        println("\nStep 3: How to print the id of the enumeration")
        println(s"Vanilla Donut's id = ${Donut.Vanilla.id}")
        
        println("\nStep 4: How to print all the values listed in Enumeration")
        println(s"Donut types = ${Donut.values}")
        
        println("\nStep 5: How to pattern match on enumeration values")
        Donut.values.foreach {
            case d if (d == Donut.Strawberry || d == Donut.Glazed) => println(s"Found favourite donut = $d")
            case _ => None
        } // foreach loop closed
            
        println("\nStep 6: How to change the default ordering of enumeration values")
        object DonutTaste extends Enumeration{
            type DonutTaste = Value
            
            val Tasty       = Value(0, "Tasty")
            val VeryTasty   = Value(1, "Very Tasty")
            val Ok          = Value(-1, "Ok")
        } // DonutTaste Enumeration closed
        println(s"Donut taste values = ${DonutTaste.values}")
        println(s"Donut taste of OK id = ${DonutTaste.Ok.id}")

     } // main closed
} // class MyClass closed
